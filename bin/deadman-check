#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'deadman_check'
require 'daemons'

program :name, 'deadman-check'
program :version, DeadmanCheck::VERSION
program :description, %q{Monitor a Redis key that contains an EPOCH time entry. Send email if EPOCH age hits given threshold}

command :switch_monitor do |c|
  c.syntax = 'deadman-check switch_monitor [options]'
  c.summary = 'Target a Redis key to monitor'
  c.description = ''
  c.example %q{Target a Redis key deadman/myservice, and this key has an EPOCH value to check looking to alert on 500 second or greater freshness},
    %q{deadman-check switch_monitor --host 127.0.0.1 --port 6379 --key deadman/myservice --freshness 500 --alert-to ops@mycomany.tld --alert-from ops-no-reply-email@mycomany.tld}
  c.option '--host HOST', String, 'IP address or hostname of Redis system'
  c.option '--port PORT', String, 'port Redis is listening on'
  c.option '--key KEY', String, 'Redis key to monitor'
  c.option '--freshness SECONDS', String, %q{The value in seconds to alert on when the recorded
    EPOCH value exceeds current EPOCH}
  c.option '--alert-to SLACKROOM', String, 'Slackroom to alert to'
  c.option '--daemon', 'Run as a daemon, otherwise will run check just once'
  c.option '--daemon-sleep SECONDS', String, 'Set the number of seconds to sleep in between switch checks, default 300'
  c.action do |args, options|
    options.default :daemon_sleep => 300
    switch_monitor = DeadmanCheck::SwitchMonitor.new(options.host, options.port,
      options.key, options.freshness, options.alert_to, options.daemon_sleep)
    if options.daemon
      Daemons.run(switch_monitor.run_check_daemon)
    else
      switch_monitor.run_check_once
    end
  end
end

command :key_set do |c|
  c.syntax = 'deadman-check key_set [options]'
  c.summary = 'Update a given Redis key with current EPOCH'
  c.description = ''
  c.example %q{Update a Redis key deadman/myservice, with current EPOCH time},
    %q{deadman-check key_set --host 127.0.0.1 --port 6379 --key deadman/myservice}
  c.option '--host HOST', String, 'IP address or hostname of Redis system'
  c.option '--port PORT', String, 'port Redis is listening on'
  c.option '--key KEY', String, 'Redis key to report EPOCH time to'
  c.action do |args, options|
    key_set = DeadmanCheck::KeySet.new(options.host, options.port,
      options.key)
    key_set.run_redis_key_update
  end
end
